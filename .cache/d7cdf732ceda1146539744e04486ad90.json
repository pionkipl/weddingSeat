{"id":"node_modules\\resource-loader\\lib\\b64.js","dependencies":[{"name":"E:\\jar\\Jarek\\Projekty\\usadzanie\\node_modules\\resource-loader\\package.json","includedInParent":true,"mtime":499162500000},{"name":"E:\\jar\\Jarek\\Projekty\\usadzanie\\package.json","includedInParent":true,"mtime":1552476660402}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.encodeBinary = encodeBinary;\nvar _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/**\n * Encodes binary into base64.\n *\n * @param {string} input The input data to encode.\n * @returns {string} The encoded base64 string\n */\nfunction encodeBinary(input) {\n    var output = '';\n    var inx = 0;\n\n    while (inx < input.length) {\n        // Fill byte buffer array\n        var bytebuffer = [0, 0, 0];\n        var encodedCharIndexes = [0, 0, 0, 0];\n\n        for (var jnx = 0; jnx < bytebuffer.length; ++jnx) {\n            if (inx < input.length) {\n                // throw away high-order byte, as documented at:\n                // https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data\n                bytebuffer[jnx] = input.charCodeAt(inx++) & 0xff;\n            } else {\n                bytebuffer[jnx] = 0;\n            }\n        }\n\n        // Get each encoded character, 6 bits at a time\n        // index 1: first 6 bits\n        encodedCharIndexes[0] = bytebuffer[0] >> 2;\n\n        // index 2: second 6 bits (2 least significant bits from input byte 1 + 4 most significant bits from byte 2)\n        encodedCharIndexes[1] = (bytebuffer[0] & 0x3) << 4 | bytebuffer[1] >> 4;\n\n        // index 3: third 6 bits (4 least significant bits from input byte 2 + 2 most significant bits from byte 3)\n        encodedCharIndexes[2] = (bytebuffer[1] & 0x0f) << 2 | bytebuffer[2] >> 6;\n\n        // index 3: forth 6 bits (6 least significant bits from input byte 3)\n        encodedCharIndexes[3] = bytebuffer[2] & 0x3f;\n\n        // Determine whether padding happened, and adjust accordingly\n        var paddingBytes = inx - (input.length - 1);\n\n        switch (paddingBytes) {\n            case 2:\n                // Set last 2 characters to padding char\n                encodedCharIndexes[3] = 64;\n                encodedCharIndexes[2] = 64;\n                break;\n\n            case 1:\n                // Set last character to padding char\n                encodedCharIndexes[3] = 64;\n                break;\n\n            default:\n                break; // No padding - proceed\n        }\n\n        // Now we will grab each appropriate character out of our keystring\n        // based on our index array and append it to the output string\n        for (var _jnx = 0; _jnx < encodedCharIndexes.length; ++_jnx) {\n            output += _keyStr.charAt(encodedCharIndexes[_jnx]);\n        }\n    }\n\n    return output;\n}\n\n// Backwards compat\nif (typeof module !== 'undefined') {\n    module.exports.default = encodeBinary; // eslint-disable-line no-undef\n}\n//# sourceMappingURL=b64.js.map","map":{"mappings":[{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\resource-loader\\lib\\b64.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}}],"sources":{"node_modules\\resource-loader\\lib\\b64.js":"'use strict';\n\nexports.__esModule = true;\nexports.encodeBinary = encodeBinary;\nvar _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/**\n * Encodes binary into base64.\n *\n * @param {string} input The input data to encode.\n * @returns {string} The encoded base64 string\n */\nfunction encodeBinary(input) {\n    var output = '';\n    var inx = 0;\n\n    while (inx < input.length) {\n        // Fill byte buffer array\n        var bytebuffer = [0, 0, 0];\n        var encodedCharIndexes = [0, 0, 0, 0];\n\n        for (var jnx = 0; jnx < bytebuffer.length; ++jnx) {\n            if (inx < input.length) {\n                // throw away high-order byte, as documented at:\n                // https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data\n                bytebuffer[jnx] = input.charCodeAt(inx++) & 0xff;\n            } else {\n                bytebuffer[jnx] = 0;\n            }\n        }\n\n        // Get each encoded character, 6 bits at a time\n        // index 1: first 6 bits\n        encodedCharIndexes[0] = bytebuffer[0] >> 2;\n\n        // index 2: second 6 bits (2 least significant bits from input byte 1 + 4 most significant bits from byte 2)\n        encodedCharIndexes[1] = (bytebuffer[0] & 0x3) << 4 | bytebuffer[1] >> 4;\n\n        // index 3: third 6 bits (4 least significant bits from input byte 2 + 2 most significant bits from byte 3)\n        encodedCharIndexes[2] = (bytebuffer[1] & 0x0f) << 2 | bytebuffer[2] >> 6;\n\n        // index 3: forth 6 bits (6 least significant bits from input byte 3)\n        encodedCharIndexes[3] = bytebuffer[2] & 0x3f;\n\n        // Determine whether padding happened, and adjust accordingly\n        var paddingBytes = inx - (input.length - 1);\n\n        switch (paddingBytes) {\n            case 2:\n                // Set last 2 characters to padding char\n                encodedCharIndexes[3] = 64;\n                encodedCharIndexes[2] = 64;\n                break;\n\n            case 1:\n                // Set last character to padding char\n                encodedCharIndexes[3] = 64;\n                break;\n\n            default:\n                break; // No padding - proceed\n        }\n\n        // Now we will grab each appropriate character out of our keystring\n        // based on our index array and append it to the output string\n        for (var _jnx = 0; _jnx < encodedCharIndexes.length; ++_jnx) {\n            output += _keyStr.charAt(encodedCharIndexes[_jnx]);\n        }\n    }\n\n    return output;\n}\n\n// Backwards compat\nif (typeof module !== 'undefined') {\n    module.exports.default = encodeBinary; // eslint-disable-line no-undef\n}\n//# sourceMappingURL=b64.js.map"},"lineCount":78}},"hash":"d6f050d6f2c30d6369227ffe3aa3c27e","cacheData":{"env":{}}}